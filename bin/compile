#!/usr/bin/env bash

indent() {
  sed -u 's/^/       /'
}
CACHE_DIR=$2
SOURCE_LIST=`dirname $0`/../etc/sources.list
IMAGEMAGICK_VERSION=8:6.8.9.9-5
BIN_PATH=.apt/usr/bin
LIB_PATH=.apt/usr/lib/x86_64-linux-gnu/
MAGICK_CODER_MODULE_PATH=$LIB_PATH/ImageMagick-6.8.9/modules-Q16/coders
MAGICK_CODER_FILTER_PATH=$LIB_PATH/ImageMagick-6.8.9/modules-Q16/filters
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR -o Dir::Etc::SourceList=$SOURCE_LIST"

apt-get $APT_OPTIONS update | indent

echo "Installing ImageMagick ${IMAGEMAGICK_VERSION}" | arrow

apt-get $APT_OPTIONS -y -d install imagemagick=$IMAGEMAGICK_VERSION | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  dpkg -x $DEB $BUILD_DIR/.apt/
done

echo "Linking binaries" | arrow

cd $BUILD_DIR/$BIN_PATH

for binary in *-im6; do
  ln -s $binary ${binary%-im6*}
done

echo "Testing imagemagick installation" | arrow
export LD_LIBRARY_PATH="$BUILD_DIR/$LIB_PATH:$LD_LIBRARY_PATH"
$BUILD_DIR/$BIN_PATH/identify -list format | indent

echo "Building runtime environment" | arrow
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/z_imagemagick.sh
export PATH="\$HOME/$BIN_PATH:\$PATH"
export LD_LIBRARY_PATH="\$HOME/$LIB_PATH:\$LD_LIBRARY_PATH"
export MAGICK_CODER_FILTER_PATH="\$HOME/$MAGICK_CODER_FILTER_PATH"
export MAGICK_CODER_MODULE_PATH="\$HOME/$MAGICK_CODER_MODULE_PATH"
EOF

echo "-----> Install ffmpeg (with LAME support)"
BUILD_DIR=$1
VENDOR_DIR="vendor"
FFMPEG_DOWNLOAD_URL="https://github.com/afrog33k/heroku-buildpack-ffmpeg-nodejs/releases/download/0.0.1/ffmpeg.tar.gz"
LAME_DOWNLOAD_URL="https://github.com/afrog33k/heroku-buildpack-ffmpeg-nodejs/releases/download/0.0.1/mp3lame.tar.gz"

echo "FFMPEG_DOWNLOAD_URL = " $FFMPEG_DOWNLOAD_URL | indent
echo "LAME_DOWNLOAD_URL = " $LAME_DOWNLOAD_URL | indent

cd $BUILD_DIR
mkdir -p $VENDOR_DIR
cd $VENDOR_DIR
curl -L --silent $FFMPEG_DOWNLOAD_URL | tar xz
curl -L --silent $LAME_DOWNLOAD_URL | tar xz

echo "exporting PATH and LIBRARY_PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/ffmpeg_lame.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$PATH:vendor/ffmpeg/bin:vendor/mp3lame/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:vendor/ffmpeg/lib:vendor/mp3lame/lib"' >> $PROFILE_PATH





####### Configure environment

set -o errexit    # always exit on error
set -o errtrace   # trap errors in functions as well
set -o pipefail   # don't ignore exit codes when piping output
set -o posix      # more strict failures in subshells
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)
heroku_dir=$build_dir/.heroku
mkdir -p $heroku_dir/node
warnings=$(mktemp)

# Load dependencies
source $bp_dir/lib/common.sh
source $bp_dir/lib/build.sh
source $bp_dir/lib/warnings.sh

# Avoid GIT_DIR leak from previous build steps
unset GIT_DIR

# Provide hook to deal with errors
trap build_failed ERR

####### Determine current state

head "Reading application state"
read_current_state
show_current_state

if [ "$iojs_engine" == "" ]; then
  warn_node_engine "$node_engine"
else
  warn_node_engine "$iojs_engine"
fi
warn_node_modules "$modules_source"

####### Vendor in binaries

head "Installing binaries"
if [ "$iojs_engine" == "" ]; then
  install_node "$node_engine"
else
  install_iojs "$iojs_engine"
fi
install_npm

####### Build the project's dependencies

head "Building dependencies"
cd $build_dir
build_dependencies

####### Create a Procfile if possible

head "Checking startup method"
ensure_procfile "$start_method" "$build_dir"
warn_start "$start_method"

####### Finalize the build

head "Finalizing build"
write_profile
write_export
clean_npm
clean_cache
create_cache
build_succeeded
